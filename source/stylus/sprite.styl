/*
Stylus variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon_home_width;
}

The large array-like variables contain all information about a single icon
$icon_home = x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet = width height image $spritesheet_sprites;
*/
$android_name = 'android';
$android_x = 88px;
$android_y = 0px;
$android_offset_x = -88px;
$android_offset_y = 0px;
$android_width = 16px;
$android_height = 20px;
$android_total_width = 104px;
$android_total_height = 77px;
$android_image = '~sprite/sprite.png';
$android = 88px 0px -88px 0px 16px 20px 104px 77px '~sprite/sprite.png' 'android';
$firefox_name = 'firefox';
$firefox_x = 0px;
$firefox_y = 30px;
$firefox_offset_x = 0px;
$firefox_offset_y = -30px;
$firefox_width = 28px;
$firefox_height = 27px;
$firefox_total_width = 104px;
$firefox_total_height = 77px;
$firefox_image = '~sprite/sprite.png';
$firefox = 0px 30px 0px -30px 28px 27px 104px 77px '~sprite/sprite.png' 'firefox';
$google_name = 'google';
$google_x = 60px;
$google_y = 30px;
$google_offset_x = -60px;
$google_offset_y = -30px;
$google_width = 26px;
$google_height = 26px;
$google_total_width = 104px;
$google_total_height = 77px;
$google_image = '~sprite/sprite.png';
$google = 60px 30px -60px -30px 26px 26px 104px 77px '~sprite/sprite.png' 'google';
$ie_name = 'ie';
$ie_x = 30px;
$ie_y = 30px;
$ie_offset_x = -30px;
$ie_offset_y = -30px;
$ie_width = 20px;
$ie_height = 19px;
$ie_total_width = 104px;
$ie_total_height = 77px;
$ie_image = '~sprite/sprite.png';
$ie = 30px 30px -30px -30px 20px 19px 104px 77px '~sprite/sprite.png' 'ie';
$opera_name = 'opera';
$opera_x = 0px;
$opera_y = 0px;
$opera_offset_x = 0px;
$opera_offset_y = 0px;
$opera_width = 28px;
$opera_height = 28px;
$opera_total_width = 104px;
$opera_total_height = 77px;
$opera_image = '~sprite/sprite.png';
$opera = 0px 0px 0px 0px 28px 28px 104px 77px '~sprite/sprite.png' 'opera';
$pc_name = 'pc';
$pc_x = 0px;
$pc_y = 59px;
$pc_offset_x = 0px;
$pc_offset_y = -59px;
$pc_width = 20px;
$pc_height = 18px;
$pc_total_width = 104px;
$pc_total_height = 77px;
$pc_image = '~sprite/sprite.png';
$pc = 0px 59px 0px -59px 20px 18px 104px 77px '~sprite/sprite.png' 'pc';
$safari_name = 'safari';
$safari_x = 30px;
$safari_y = 0px;
$safari_offset_x = -30px;
$safari_offset_y = 0px;
$safari_width = 28px;
$safari_height = 28px;
$safari_total_width = 104px;
$safari_total_height = 77px;
$safari_image = '~sprite/sprite.png';
$safari = 30px 0px -30px 0px 28px 28px 104px 77px '~sprite/sprite.png' 'safari';
$yandex_name = 'yandex';
$yandex_x = 60px;
$yandex_y = 0px;
$yandex_offset_x = -60px;
$yandex_offset_y = 0px;
$yandex_width = 26px;
$yandex_height = 28px;
$yandex_total_width = 104px;
$yandex_total_height = 77px;
$yandex_image = '~sprite/sprite.png';
$yandex = 60px 0px -60px 0px 26px 28px 104px 77px '~sprite/sprite.png' 'yandex';
$spritesheet_width = 104px;
$spritesheet_height = 77px;
$spritesheet_image = '~sprite/sprite.png';
$spritesheet_sprites = $android $firefox $google $ie $opera $pc $safari $yandex;
$spritesheet = 104px 77px '~sprite/sprite.png' $spritesheet_sprites;

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  spriteWidth($icon_home)
}

.icon-email {
  sprite($icon_email)
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
spriteWidth($sprite) {
  width: $sprite[4];
}

spriteHeight($sprite) {
  height: $sprite[5];
}

spritePosition($sprite) {
  background-position: $sprite[2] $sprite[3];
}

spriteImage($sprite) {
  background-image: url($sprite[8]);
}

sprite($sprite) {
  spriteImage($sprite)
  spritePosition($sprite)
  spriteWidth($sprite)
  spriteHeight($sprite)
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of Stylus

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

sprites($spritesheet_sprites);
*/
sprites($sprites) {
  for $sprite in $sprites {
    $sprite_name = $sprite[9];
    .{$sprite_name} {
      sprite($sprite);
    }
  }
}
